@Tutorial(time: 30) {
  @Intro(title: "Get started on Linux with Docker") {
    Install the tools needed to build an ESP Matter accessory on Linux using a Docker container.
  }
  
  @Section(title: "Build the Docker image and tools") {
    @ContentAndMedia { 
      > Important: Make sure you have at least 30 GB of free space on your host computer. 
    }
    
    @Steps {
      @Step {
        If you don't have it yet, install Docker by following the [Get Docker](https://docs.docker.com/get-docker/) setup instructions.
      }

      @Step {
        Clone the swift-matter-examples repository.
        
        The `Dockerfile` in swift-matter-examples has all of the steps needed for a working build environment, many of which are the same steps described in the <doc:Setup-MacOS> tutorial. 

        @Code(name: "Setup.shell", file: "setup-linux-00.sh")
      }
      
      @Step {
        Use `docker build` to build and tag the image.
        
        Building the image may take a significant amount of time to download and build all the required dependencies.
        
        @Code(name: "Setup.shell", file: "setup-linux-01.sh", previousFile: "setup-linux-00.sh") 
      }
      
      @Step {
        Install `esptool`, see [Using Remote Serial Port](https://docs.espressif.com/projects/esp-idf/en/stable/esp32/api-guides/tools/idf-docker-image.html#using-remote-serial-port) for installation instructions. 
        
        The `esptool` package contains `esp_rfc2217_server`, a program needed to flash the microcontroller from a docker container.

        @Code(name: "Setup.shell", file: "setup-linux-02.sh", previousFile: "setup-linux-01.sh") 
      }
    }
  }
    
  @Section(title: "Run the container") {
    @ContentAndMedia {
      Launch the docker container and forward access to your microcontroller to the container. 
    }
    
    @Steps {
      @Step {
        Find your attached microcontroller; on a Linux host computer the microcontroller should appear as a special file with the format **`/dev/ttyUSB...`**.
        
        Ensure your microcontroller is connected over USB before looking for the device.
        
        @Code(name: "Setup.shell", file: "setup-linux-03.sh", previousFile: "setup-linux-02.sh") 
      }
      
      @Step {
        Run `esp_rfc2217_server` on your host machine to proxy the microcontroller serial connection to docker, see [Using Remote Serial Port](https://docs.espressif.com/projects/esp-idf/en/stable/esp32/api-guides/tools/idf-docker-image.html#using-remote-serial-port) for instructions.
        
        @Code(name: "Setup.shell", file: "setup-linux-04.sh", previousFile: "setup-linux-03.sh") 
      }

      @Step {
        In a new shell, launch the docker container from the previously built image. 
        
        > Important: Be sure to run the container from the root directory of swift-matter-examples.  

        @Code(name: "Setup.shell", file: "setup-linux-05.sh", previousFile: "setup-linux-04.sh") 
      }
    }
  }
}
